snippet create_function
abbr    create or replace function ...
  create or replace function ${1:function_name}(
    ${2:arg_name arg_type}
  ) returns ${3:void} as $$
    ${7:#:function body...}
  $$ language ${4:sql} ${5:stable} security ${6:definer};

  -- move to verify.sql
  select has_function_privilege('$1($2)', 'execute');

  -- move to revert.sql
  drop function if exists $1;
  $0

snippet grant_exec
abbr    grant execute on function ... to ...
  grant execute on function ${1:TARGET} to ${2:role_name};

  -- move to verify.sql
  select 1/count(*)
  from information_schema.role_routine_grants
  where privilege_type = 'EXECUTE'
    and grantee = '$2'
    and concat(routine_schema, '.', routine_name) = '$1';

  -- move to revert.sql
  revoke execute on function $1 from $2;
  $0

snippet create_policy
abbr    create policy ... on ...
  do $$
  begin
  if not exists (
    select from pg_catalog.pg_policies
    where policyname = '$1'
  ) then
  create policy ${1:policy_name} on ${2:table}
  as ${3:permissive}
  for ${4:all}
  to ${5:role_name}
  using (${6:using_expression})
  with check (${7:$6});
  end if;
  end;
  $$;

  alter table $2 enable row level security;

  -- move to verify.sql
  select 1/count(*)
  from pg_catalog.pg_policies
  where policyname = '$1'
    and concat(schemaname, '.', tablename) = '$2'
    and '$5' = any(roles);

  -- move to revert.sql
  drop policy if exists $1 on $2;
  alter table $2 disable row level security;
  $0

snippet if_not_exists
abbr    if not exists ...
  do $$
  begin
    if not exists (
      select from ${1}
      where ${2}
    ) then
      ${3}
    end if;
  end;
  $$;
